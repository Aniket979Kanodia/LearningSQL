<!------------------------------------------------------------------------------------------->
#####Create Table "SalesPeople" in database aniketdb#####

CREATE TABLE `aniketdb`.`salespeople` (
  `SNUM` INT NOT NULL,
  `SNAME` VARCHAR(255) NOT NULL,
  `CITY` VARCHAR(255) NOT NULL,
  `COMM` INT NOT NULL,
  PRIMARY KEY (`SNUM`));

<!------------------------------------------------------------------------------------------->

####Insert data in Table "Salespeople"####

INSERT INTO `aniketdb`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1001', 'Peel', 'London', '12');
INSERT INTO `aniketdb`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1002', 'Serres', 'Sanjose', '13');
INSERT INTO `aniketdb`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1004', 'Motika', 'London', '11');
INSERT INTO `aniketdb`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1007', 'Rifkin', 'Barcelona', '15');
INSERT INTO `aniketdb`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1003', 'AxelRod', 'New York', '10');
INSERT INTO `aniketdb`.`salespeople` (`SNUM`, `SNAME`, `CITY`, `COMM`) VALUES ('1008', 'Fran', 'London', '25');

#####Table - "Salespeople"#####

+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | Sanjose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+

<!------------------------------------------------------------------------------------------->
#Create Table Consumers in database aniketdb

CREATE TABLE `aniketdb`.`customers` (
  `CNUM` INT NOT NULL,
  `CNAME` VARCHAR(225) NOT NULL,
  `CITY` VARCHAR(225) NOT NULL,
  `RATING` VARCHAR(225) NOT NULL,
  `SNUM` VARCHAR(225) NOT NULL,
  PRIMARY KEY (`CNUM`));

<!------------------------------------------------------------------------------------------->

####Insert data in Table "Customers"####

INSERT INTO `aniketdb`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2001', 'Hoffman', 'London', '100', '1001');
INSERT INTO `aniketdb`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2002', 'Glovanni', 'Rome', '200', '1003');
INSERT INTO `aniketdb`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2003', 'Liu', 'SanJose', '200', '1002');
INSERT INTO `aniketdb`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2004', 'Grass', 'Berlin', '300', '1002');
INSERT INTO `aniketdb`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2006', 'Clemens', 'London', '100', '1001');
INSERT INTO `aniketdb`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2008', 'Cisneros', 'SanJose', '300', '1007');
INSERT INTO `aniketdb`.`customers` (`CNUM`, `CNAME`, `CITY`, `RATING`, `SNUM`) VALUES ('2007', 'Pereira', 'Rome', '100', '1004');

#####Table - "Customers" #####
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  | 100    | 1001 |
| 2002 | Glovanni | Rome    | 200    | 1003 |
| 2003 | Liu      | SanJose | 200    | 1002 |
| 2004 | Grass    | Berlin  | 300    | 1002 |
| 2006 | Clemens  | London  | 100    | 1001 |
| 2007 | Pereira  | Rome    | 100    | 1004 |
| 2008 | Cisneros | SanJose | 300    | 1007 |
+------+----------+---------+--------+------+

<!------------------------------------------------------------------------------------------->

####Create and insert data in table - "Orders" ####

#####Table - "Orders"#####
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3003 |  767.19 | 1990-03-10 | 2001 | 1001 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3007 |   75.75 | 1990-04-10 | 2004 | 1002 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+



QUERIES

1) List all the columns of the Salespeople table.

>>
mysql> SHOW columns from Salespeople;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| SNUM  | int          | NO   | PRI | NULL    |       |
| SNAME | varchar(255) | NO   |     | NULL    |       |
| CITY  | varchar(255) | NO   |     | NULL    |       |
| COMM  | int          | NO   |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+
4 rows in set (0.02 sec)

2) List all customers with a rating of 100.
>>
mysql> SELECT * from customers
    -> where rating = 100;
+------+---------+--------+--------+------+
| CNUM | CNAME   | CITY   | RATING | SNUM |
+------+---------+--------+--------+------+
| 2001 | Hoffman | London | 100    | 1001 |
| 2006 | Clemens | London | 100    | 1001 |
| 2007 | Pereira | Rome   | 100    | 1004 |
+------+---------+--------+--------+------+
3 rows in set (0.05 sec)

3) -------------------------------------------------------------

4)Arrange the Order table by descending customer number.
>>
mysql> select * from orders
    -> ORDER BY CNUM DESC;
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
| 3007 |   75.75 | 1990-04-10 | 2004 | 1002 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3003 |  767.19 | 1990-03-10 | 2001 | 1001 |
+------+---------+------------+------+------+
10 rows in set (0.00 sec)

5) Find which salespeople currently have orders in the order table.
>>
mysql> SELECT DISTINCT SNUM, SNAME
    -> FROM ORDERS
    -> LEFT JOIN SALESPEOPLE
    -> USING(SNUM);
+------+---------+
| SNUM | SNAME   |
+------+---------+
| 1007 | Rifkin  |
| 1004 | Motika  |
| 1001 | Peel    |
| 1002 | Serres  |
| 1003 | AxelRod |
+------+---------+

6) List names of all customers matched with the salespeople serving them.
>>
mysql> SELECT CNAME, SNAME
    -> FROM CUSTOMERS
    -> LEFT JOIN SALESPEOPLE
    -> USING(SNUM);
+----------+---------+
| CNAME    | SNAME   |
+----------+---------+
| Hoffman  | Peel    |
| Glovanni | AxelRod |
| Liu      | Serres  |
| Grass    | Serres  |
| Clemens  | Peel    |
| Pereira  | Motika  |
| Cisneros | Rifkin  |
+----------+---------+
7 rows in set (0.02 sec)

7) Find the names and numbers of all salespeople who have more than one customer.
>>
mysql> SELECT SNAME, SNUM
    -> FROM CUSTOMERS
    -> LEFT JOIN SALESPEOPLE
    -> USING(SNUM)
    -> GROUP BY SNUM
    -> HAVING(COUNT(SNUM)>1);
+--------+------+
| SNAME  | SNUM |
+--------+------+
| Peel   | 1001 |
| Serres | 1002 |
+--------+------+
2 rows in set (0.00 sec)

8) Count the orders of each of the salespeople and output the results in descending order.

>>
mysql> SELECT SNUM , COUNT(SNUM) As FREQUENCY
    -> FROM ORDERS
    -> GROUP BY SNUM
    -> ORDER BY
    -> COUNT(SNUM) DESC;
+------+-----------+
| SNUM | FREQUENCY |
+------+-----------+
| 1001 |         3 |
| 1002 |         3 |
| 1007 |         2 |
| 1004 |         1 |
| 1003 |         1 |
+------+-----------+
5 rows in set (0.07 sec)

9) List the customer table if and only if one or more of the customers in the Customer table are located in SanJose.
>>
mysql> SELECT *
    -> FROM CUSTOMERS
    -> WHERE EXISTS
    -> (SELECT *
    -> FROM CUSTOMERS
    -> WHERE CITY = 'SanJose');
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2001 | Hoffman  | London  | 100    | 1001 |
| 2002 | Glovanni | Rome    | 200    | 1003 |
| 2003 | Liu      | SanJose | 200    | 1002 |
| 2004 | Grass    | Berlin  | 300    | 1002 |
| 2006 | Clemens  | London  | 100    | 1001 |
| 2007 | Pereira  | Rome    | 100    | 1004 |
| 2008 | Cisneros | SanJose | 300    | 1007 |
+------+----------+---------+--------+------+
7 rows in set (0.03 sec)

10) --------------------------------------------------------------------------

11) Find all the customers in SanJose who have a rating above 200.

>>
mysql> SELECT * FROM CUSTOMERS
    -> WHERE CITY = 'SANJOSE' && RATING>200;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2008 | Cisneros | SanJose | 300    | 1007 |
+------+----------+---------+--------+------+
1 row in set, 1 warning (0.00 sec)

12) List the names and commissions of all salespeople in London.

>>
mysql> SELECT SNAME , COMM
    -> FROM SALESPEOPLE
    -> WHERE CITY = 'LONDON';
+--------+------+
| SNAME  | COMM |
+--------+------+
| Peel   |   12 |
| Motika |   11 |
| Fran   |   25 |
+--------+------+
3 rows in set (0.01 sec)

13) List all the orders of Salesperson Motika from the orders table.
>>
mysql> SELECT ONUM , AMT , ODATE , CNUM ,SNAME
    -> FROM ORDERS
    -> LEFT JOIN SALESPEOPLE
    -> USING (SNUM)
    -> WHERE SNAME = 'MOTIKA';
+------+---------+------------+------+--------+
| ONUM | AMT     | ODATE      | CNUM | SNAME  |
+------+---------+------------+------+--------+
| 3002 | 1900.10 | 1990-03-10 | 2007 | Motika |
+------+---------+------------+------+--------+
1 row in set (0.01 sec)

14)Find all customers who booked orders on October 3.
>> 
mysql> SELECT ODATE , CNAME , CNUM
    -> from orders
    -> LEFT Join Customers
    -> USING(CNUM)
    -> where ODATE = '1990-03-10';
+------------+----------+------+
| ODATE      | CNAME    | CNUM |
+------------+----------+------+
| 1990-03-10 | Cisneros | 2008 |
| 1990-03-10 | Pereira  | 2007 |
| 1990-03-10 | Hoffman  | 2001 |
| 1990-03-10 | Liu      | 2003 |
| 1990-03-10 | Cisneros | 2008 |
+------------+----------+------+
5 rows in set (0.00 sec)

15) Give the sums of the amounts from the Orders table, grouped by date, eliminating all those dates where the SUM was not at least 2000 above
the maximum Amount.
>>
mysql> select ODATE , SUM(AMT) AS TOTAL , MAX(AMT) AS MAX
    -> FROM ORDERS
    -> GROUP BY ODATE
    -> HAVING ((TOTAL - MAX)>2000);
+------------+---------+---------+
| ODATE      | TOTAL   | MAX     |
+------------+---------+---------+
| 1990-03-10 | 8944.59 | 5160.45 |
+------------+---------+---------+
1 row in set (0.00 sec)
2 rows in set (0.00 sec)

16) Select all orders that had amounts that were greater than at least one of the orders from October 6.
>>
mysql> SELECT * FROM ORDERS
    -> WHERE (AMT > ANY(SELECT AMT FROM ORDERS WHERE ODATE = '1990-06-10'));
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+
5 rows in set (0.00 sec)

17) Write a query that uses the EXISTS operator to extract all salespeople who have customers with a rating of 300.

>>
mysql> SELECT SNUM , SNAME
    -> FROM SALESPEOPLE
    -> WHERE EXISTS(
    -> SELECT RATING
    -> FROM CUSTOMERS
    -> WHERE RATING = 300);
+------+---------+
| SNUM | SNAME   |
+------+---------+
| 1001 | Peel    |
| 1002 | Serres  |
| 1003 | AxelRod |
| 1004 | Motika  |
| 1007 | Rifkin  |
| 1008 | Fran    |
+------+---------+
6 rows in set (0.05 sec)

18) Find all customers whose cnum is 1000 above the snum of Serres.
>>
mysql> SELECT CNUM , CNAME
    -> FROM CUSTOMERS
    -> WHERE(CNUM - 1000 =
    -> (SELECT SNUM
    -> FROM SALESPEOPLE
    -> WHERE SNAME = 'SERRES'));
+------+----------+
| CNUM | CNAME    |
+------+----------+
| 2002 | Glovanni |
+------+----------+
1 row in set (0.00 sec)

19)------------------------------------------------------------------------------

20) Give the salespeople’s commissions as percentages instead of decimal numbers.
>> 
mysql> SELECT ODATE , MAX(AMT) AS MAX_AMT , SNUM
    -> FROM ORDERS
    -> GROUP BY ODATE,SNUM
    -> HAVING (MAX_AMT>=3000);
+------------+---------+------+
| ODATE      | MAX_AMT | SNUM |
+------------+---------+------+
| 1990-03-10 | 5160.45 | 1002 |
| 1990-05-10 | 4723.00 | 1001 |
| 1990-06-10 | 9891.88 | 1001 |
+------------+---------+------+
3 rows in set (0.01 sec)

21) List all the largest orders for October 3, for each salesperson.
>>
mysql> SELECT ODATE , MAX(AMT) AS MAX_AMT , SNUM
    -> FROM ORDERS
    -> GROUP BY SNUM
    -> HAVING (ODATE = '1990-03-10');
+------------+---------+------+
| ODATE      | MAX_AMT | SNUM |
+------------+---------+------+
| 1990-03-10 | 1098.16 | 1007 |
| 1990-03-10 | 1900.10 | 1004 |
| 1990-03-10 | 9891.88 | 1001 |
| 1990-03-10 | 5160.45 | 1002 |
+------------+---------+------+
4 rows in set (0.00 sec)

22)Find all customers located in cities where Serres has customers.
>>
mysql> SELECT CNUM , CNAME , CITY
    -> FROM CUSTOMERS
    -> WHERE
    -> CITY in  (SELECT CITY FROM CUSTOMERS
    -> WHERE SNUM = (SELECT SNUM FROM SALESPEOPLE
    -> WHERE SNAME = 'SERRES'));
+------+----------+---------+
| CNUM | CNAME    | CITY    |
+------+----------+---------+
| 2003 | Liu      | SanJose |
| 2004 | Grass    | Berlin  |
| 2008 | Cisneros | SanJose |
+------+----------+---------+
3 rows in set (0.00 sec)

23)Select all customers with a rating above 200.
>>
mysql> SELECT * FROM CUSTOMERS
    -> HAVING (RATING>200);
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2004 | Grass    | Berlin  | 300    | 1002 |
| 2008 | Cisneros | SanJose | 300    | 1007 |
+------+----------+---------+--------+------+
2 rows in set (0.00 sec)

24)Count the number of salespeople currently having orders in the orders table.
>>
mysql> SELECT COUNT(DISTINCT SNUM) AS COUNT
    -> FROM ORDERS;
+-------+
| COUNT |
+-------+
|     5 |
+-------+
1 row in set (0.01 sec)

25) Write a query that produces all customers serviced by salespeople with a commission above 12%. Output the customer’s name,
salesperson’s name and the salesperson’s rate of commission.
>>
mysql> SELECT CNAME , SNAME , COMM
    -> FROM CUSTOMERS
    -> LEFT JOIN SALESPEOPLE
    -> USING(SNUM)
    -> HAVING (COMM>12);
+----------+--------+------+
| CNAME    | SNAME  | COMM |
+----------+--------+------+
| Liu      | Serres |   13 |
| Grass    | Serres |   13 |
| Cisneros | Rifkin |   15 |
+----------+--------+------+
3 rows in set (0.00 sec)

26) Find salespeople who have multiple customers.
>>
mysql> SELECT SNAME, SNUM , COUNT(SNUM) AS NO_OF_CUSTOMERS
    -> FROM CUSTOMERS
    -> LEFT JOIN SALESPEOPLE
    -> USING(SNUM)
    -> GROUP BY SNUM
    -> HAVING(COUNT(SNUM)>1);
+--------+------+-----------------+
| SNAME  | SNUM | NO_OF_CUSTOMERS |
+--------+------+-----------------+
| Peel   | 1001 |               2 |
| Serres | 1002 |               2 |
+--------+------+-----------------+
2 rows in set (0.01 sec)

27) Find salespeople with customers located in their own cities.
>>
mysql> SELECT C.CNAME , C.CITY AS CUSTOMER_CITY , S.SNAME , S.CITY AS SALESPEOPLE_CITY
    -> FROM SALESPEOPLE S , CUSTOMERS C
    -> WHERE C.SNUM = S.SNUM AND C.CITY = S.CITY;
+---------+---------------+--------+------------------+
| CNAME   | CUSTOMER_CITY | SNAME  | SALESPEOPLE_CITY |
+---------+---------------+--------+------------------+
| Hoffman | London        | Peel   | London           |
| Liu     | SanJose       | Serres | Sanjose          |
| Clemens | London        | Peel   | London           |
+---------+---------------+--------+------------------+
3 rows in set (0.00 sec)

28) 28) Find all salespeople whose name starts with ‘P’ and fourth character is ‘L’.
>>
mysql> SELECT * FROM
    -> SALESPEOPLE
    -> WHERE SNAME LIKE 'P%%L%';
+------+-------+--------+------+
| SNUM | SNAME | CITY   | COMM |
+------+-------+--------+------+
| 1001 | Peel  | London |   12 |
+------+-------+--------+------+
1 row in set (0.00 sec)

29) Write a query that uses a subquery to obtain all orders for the customer named ‘Cisneros’. Assume you do not know his customer number.
>>
mysql> SELECT * FROM ORDERS
    -> WHERE CNUM =
    -> (SELECT CNUM FROM CUSTOMERS
    -> WHERE CNAME = 'CISNEROS');
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
+------+---------+------------+------+------+
2 rows in set (0.00 sec)

30)Find the largest orders for Serres and Rifkin.
>>
mysql> SELECT ONUM , SNAME ,  MAX(AMT) AS MAX_ORDER
    -> FROM ORDERS
    -> LEFT JOIN SALESPEOPLE
    -> USING(SNUM)
    -> GROUP BY SNAME
    -> HAVING (SNAME = 'RIFKIN' OR SNAME = 'SERRES');
+------+--------+-----------+
| ONUM | SNAME  | MAX_ORDER |
+------+--------+-----------+
| 3001 | Rifkin |   1098.16 |
| 3005 | Serres |   5160.45 |
+------+--------+-----------+
2 rows in set (0.00 sec)

31) Sort the salespeople table in the following order: snum, sname, commission, city.
>>
mysql> SELECT * FROM SALESPEOPLE
    -> ORDER BY SNUM , SNAME , COMM , CITY;
+------+---------+-----------+------+
| SNUM | SNAME   | CITY      | COMM |
+------+---------+-----------+------+
| 1001 | Peel    | London    |   12 |
| 1002 | Serres  | Sanjose   |   13 |
| 1003 | AxelRod | New York  |   10 |
| 1004 | Motika  | London    |   11 |
| 1007 | Rifkin  | Barcelona |   15 |
| 1008 | Fran    | London    |   25 |
+------+---------+-----------+------+
6 rows in set (0.01 sec)

32) Select all customers whose names fall in between ‘A’ and ‘G’ alphabetical range.
>>
mysql> SELECT * FROM CUSTOMERS
    -> WHERE CNAME BETWEEN 'A%' AND 'H%'
    -> ORDER BY CNAME;
+------+----------+---------+--------+------+
| CNUM | CNAME    | CITY    | RATING | SNUM |
+------+----------+---------+--------+------+
| 2008 | Cisneros | SanJose | 300    | 1007 |
| 2006 | Clemens  | London  | 100    | 1001 |
| 2002 | Glovanni | Rome    | 200    | 1003 |
| 2004 | Grass    | Berlin  | 300    | 1002 |
+------+----------+---------+--------+------+
4 rows in set (0.00 sec)

33) -----------------------------------------------------

34) Select all orders that are greater than the average for October 4.
>>
mysql> SELECT * FROM ORDERS WHERE
    -> AMT>(SELECT AVG(AMT) FROM ORDERS WHERE ODATE  = '1990-04-10');
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+
7 rows in set (0.00 sec)

35) Write a select command using correlated subquery that selects the names and numbers of all customers with ratings equal to the maximum
for their city.
>>
mysql> SELECT C.CNAME , C.CNUM ,C.CITY FROM CUSTOMERS AS C
    -> WHERE C.RATING = (SELECT MAX(RATING) FROM CUSTOMERS WHERE CITY = C.CITY);
+----------+------+---------+
| CNAME    | CNUM | CITY    |
+----------+------+---------+
| Hoffman  | 2001 | London  |
| Glovanni | 2002 | Rome    |
| Grass    | 2004 | Berlin  |
| Clemens  | 2006 | London  |
| Cisneros | 2008 | SanJose |
+----------+------+---------+
5 rows in set (0.00 sec)

36) Write a query that totals the orders for each day and places the results in descending order.
>>
mysql> SELECT ODATE , SUM(AMT) AS TOTAL
    -> FROM ORDERS
    -> GROUP BY ODATE
    -> ORDER BY TOTAL DESC;
+------------+----------+
| ODATE      | TOTAL    |
+------------+----------+
| 1990-06-10 | 11201.83 |
| 1990-03-10 |  8944.59 |
| 1990-05-10 |  4723.00 |
| 1990-04-10 |  1788.98 |
+------------+----------+
4 rows in set (0.00 sec)

37) Write a select command that produces the rating followed by the name of each customer in SanJose.
>>
mysql> SELECT RATING , CNAME
    -> FROM CUSTOMERS
    -> WHERE CITY = 'SanJose';
+--------+----------+
| RATING | CNAME    |
+--------+----------+
| 200    | Liu      |
| 300    | Cisneros |
+--------+----------+
2 rows in set (0.00 sec)

38) Find all orders with amounts smaller than any amount for a customer in SanJose.
>>
mysql> SELECT * FROM ORDERS
    -> WHERE (AMT < ANY(
    -> SELECT AMT FROM
    -> ORDERS
    -> LEFT JOIN CUSTOMERS
    -> USING(CNUM)
    -> where city = 'SanJose'));
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3001 |   18.69 | 1990-03-10 | 2008 | 1007 |
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3003 |  767.19 | 1990-03-10 | 2001 | 1001 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3007 |   75.75 | 1990-04-10 | 2004 | 1002 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
+------+---------+------------+------+------+
8 rows in set (0.00 sec)

39)-----------------------------------------------------------------------------

40) Write a query that selects the highest rating in each city.
>>
mysql> SELECT CITY , MAX(RATING) AS HIGHEST_RATING
    -> FROM CUSTOMERS
    -> GROUP BY CITY;
+---------+----------------+
| CITY    | HIGHEST_RATING |
+---------+----------------+
| London  | 100            |
| Rome    | 200            |
| SanJose | 300            |
| Berlin  | 300            |
+---------+----------------+
4 rows in set (0.00 sec)

41)Write a query that calculates the amount of the salesperson’s commission on each order by a customer with a rating above 100.00.
>>
mysql> SELECT O.ONUM , O.AMT , O.SNUM , S.SNAME , S.COMM , C.RATING , O.AMT*S.COMM/100 AS COMMISSION
    -> FROM ORDERS O, CUSTOMERS C, SALESPEOPLE S
    -> WHERE O.SNUM = S.SNUM AND O.CNUM = C.CNUM AND C.RATING>100;
+------+---------+------+---------+------+--------+------------+
| ONUM | AMT     | SNUM | SNAME   | COMM | RATING | COMMISSION |
+------+---------+------+---------+------+--------+------------+
| 3001 |   18.69 | 1007 | Rifkin  |   15 | 300    |   2.803500 |
| 3005 | 5160.45 | 1002 | Serres  |   13 | 200    | 670.858500 |
| 3006 | 1098.16 | 1007 | Rifkin  |   15 | 300    | 164.724000 |
| 3007 |   75.75 | 1002 | Serres  |   13 | 300    |   9.847500 |
| 3009 | 1713.23 | 1003 | AxelRod |   10 | 200    | 171.323000 |
| 3010 | 1309.95 | 1002 | Serres  |   13 | 300    | 170.293500 |
+------+---------+------+---------+------+--------+------------+
6 rows in set (0.01 sec)

42) Count the customers with ratings above SanJose’s average.
>>
mysql> SELECT COUNT(CNUM) AS NO_OF_CUSTOMERS
    -> FROM CUSTOMERS
    -> WHERE RATING>(SELECT AVG(RATING)
    -> FROM CUSTOMERS
    -> WHERE CITY = 'SANJOSE');
+-----------------+
| NO_OF_CUSTOMERS |
+-----------------+
|               2 |
+-----------------+
1 row in set (0.00 sec)

43) Find all salespeople that are located in either Barcelona or London.
>>
mysql> SELECT * FROM SALESPEOPLE
    -> WHERE CITY = 'Barcelona' or CITY = 'London';
+------+--------+-----------+------+
| SNUM | SNAME  | CITY      | COMM |
+------+--------+-----------+------+
| 1001 | Peel   | London    |   12 |
| 1004 | Motika | London    |   11 |
| 1007 | Rifkin | Barcelona |   15 |
| 1008 | Fran   | London    |   25 |
+------+--------+-----------+------+
4 rows in set (0.00 sec)

44)Find all salespeople with only one customer.
>>
mysql> SELECT SNUM , SNAME
    -> FROM CUSTOMERS
    -> LEFT JOIN SALESPEOPLE
    -> USING(SNUM)
    -> GROUP BY SNUM
    -> HAVING(COUNT(SNUM)= 1);
+------+---------+
| SNUM | SNAME   |
+------+---------+
| 1003 | AxelRod |
| 1004 | Motika  |
| 1007 | Rifkin  |
+------+---------+
3 rows in set (0.00 sec)

45)------------------------------------------------------------
46) Write a query that will give you all orders for more than $1000.00.
>>
mysql> SELECT * FROM ORDERS
    -> WHERE AMT>1000;
+------+---------+------------+------+------+
| ONUM | AMT     | ODATE      | CNUM | SNUM |
+------+---------+------------+------+------+
| 3002 | 1900.10 | 1990-03-10 | 2007 | 1004 |
| 3005 | 5160.45 | 1990-03-10 | 2003 | 1002 |
| 3006 | 1098.16 | 1990-03-10 | 2008 | 1007 |
| 3008 | 4723.00 | 1990-05-10 | 2006 | 1001 |
| 3009 | 1713.23 | 1990-04-10 | 2002 | 1003 |
| 3010 | 1309.95 | 1990-06-10 | 2004 | 1002 |
| 3011 | 9891.88 | 1990-06-10 | 2006 | 1001 |
+------+---------+------------+------+------+
7 rows in set (0.01 sec)





